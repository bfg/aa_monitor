#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use Getopt::Long;
use Cwd qw(abs_path);
use File::Basename;

# determine libdir and put it into @INC
use lib (
	abs_path($FindBin::RealBin .  "/../" . "lib"),
	abs_path($FindBin::RealBin .  "/../" . "ext"),
	'/usr/lib/aa_monitor',
	'/usr/local/lib/aa_monitor',
	
);

use P9::AA::Log;
use P9::AA::Config;
use P9::AA::Constants qw(:all);

#############################################################
#                    Runtime variables                      #
#############################################################
my $MYNAME= basename($0);

our $VERSION = '1.1.1';

my $log = P9::AA::Log->new();
my $cfg = P9::AA::Config->new();

my $cmd_line = 0;
my $nagios = 0;

#############################################################
#                        FUNCTIONS                          #
#############################################################

sub print_var {
	my ($val, $bool) = @_;
	$bool = 0 unless (defined $bool);
	my $str = "";
	
	if ($bool) {
		$str = ($val) ? "yes" : "no"; 	
	} else {
		if (defined $val) {
			$str = '"' . $val . '"';
		} else {
			$str = "undefined";
		}
	}

	return $str;
}

sub name {
	return $MYNAME;
}

sub config_load {
	my ($file) = @_;
	unless ($cfg->loadConfigFile($file)) {
		print STDERR "FATAL: ", $cfg->error(), "\n";
		exit 1;
	}
	return 1;
}

sub invoked_as_cgi {
	return (
		exists($ENV{GATEWAY_INTERFACE}) &&
		$ENV{GATEWAY_INTERFACE} =~ m/^CGI\/\d+/i &&
		exists($ENV{REMOTE_ADDR}) &&
		exists($ENV{REQUEST_METHOD})
	) ? 1 : 0;
}

sub get_connection {
	# load required modules
	local $@;
	eval "use " . CLASS_CONNECTION . '; 1;';
	if ($@) {
		$log->error($@);
		print STDERR "FATAL: $@\n";
		exit 1;
	}
	
	# create "connection"
	return CLASS_CONNECTION->new();
}

sub process_cgi {
	# This is essential!
	$cfg->set('protocol', 'cgi');

	# get "connection"
	my $c = get_connection();
	
	# process it...
	my $r = $c->process(\*STDIN, \*STDOUT);
	
	# this is it :)
	exit(! $r);
}

sub process_cmdl {
	# force protocol
	$cfg->set('protocol', ($nagios) ? 'nagios' : 'cmdl');

	# get "connection"
	my $c = get_connection();
	
	# process it...
	my $r = $c->process(\ @_);
	
	# this is it :)
	exit(! $r);
}

sub process_daemon {
	my $impl = $cfg->get('daemon_impl');
	$impl = 'BASIC' unless (defined $impl && length($impl));
	$impl = uc($impl);
	
	# try to load daemon class
	local $@;
	eval "use " . CLASS_DAEMON . '; 1';
	if ($@) {
		print STDERR "Unable to load daemon class: $@";
		exit 1;
	}

	# create server object...
	my $server = CLASS_DAEMON->factory($impl);
	unless (defined $server) {
		print STDERR 
			"ERROR creating server: " .
			CLASS_DAEMON->error(). "\n";
		return 0; 
	}
	
	# set connection class
	$server->conn_class(CLASS_CONNECTION);

	# start the goddamn server
	print STDERR "Starting $MYNAME daemon.\n";
	my $r = $server->run($cfg);
	unless ($r) {
		$log->error($server->error());
		print STDERR "ERROR: ", $server->error(), "\n";
	}

	return $r;
}

sub perldoc {
	my ($pkg) = @_;
	my $prefix = 'P9::AA::';
	my $doc = '';
	if (! defined $pkg || length($pkg) < 1) {
		$doc = 'P9::README_AA';
	}
	elsif ($pkg !~ m/::/) {
		$doc = 'P9::AA::Check';
		$doc .= '::' . $pkg if (length($pkg));
	} else {
		$doc = $pkg;
	}
	
	eval "use Pod::Perldoc; 1";
	if ($@) {
		print STDERR "Unable to load perldoc module, sorry.\n";
		exit 1;
	}
	
	@ARGV = ($doc);
	Pod::Perldoc->run();
	exit 0;
}

sub module_info {
	my ($name) = @_;
	eval "use " . CLASS_CHECK . "; 1";
	if ($@) {
		print STDERR "Unable to load check class. This is extremely weird.\n";
		exit 1;
	}
	
	# create object...
	my $obj = CLASS_CHECK->factory($name);
	unless (defined $obj) {
		print STDERR "Unable to create object $name: " . CLASS_CHECK->error() . "\n";
		exit 1;
	}
	
	# print some data
	no warnings;
	print "$name version " . sprintf("%-2.2f", $obj->VERSION()) . "\n";
	print "\n\t" . $obj->getDescription() . "\n";
	print "\n";
	print "CONFIGURATION OPTIONS:\n";
	foreach my $p ($obj->cfgParamList()) {
		my $def = $obj->getParamDefaultVal($p);
		my $desc = $obj->getParamDescription($p);
		print "\t$p\n";
		print "\t\t$desc\n";
		print "\t\tdefault: ", print_var($def), "\n";
	}
}

sub printhelp {
	print <<EOF
Usage: $MYNAME [OPTIONS]

This is aa_monitor, interface to modular service health checking
architecture. This script can be used as:

 * command line client
 * nagios/icinga external check
 * CGI script
 * standalone HTTP(s) server
 * standalone FCGI server

EOF
;
	print "OPTIONS:\n";
	print "  -c      --config=FILE    Loads specified configuration file\n";
	print "          --default-config Prints default configuration file\n";
	print "\n";
	print "CONFIGURATION FILE LOCATIONS:\n";
	print "\n";
	foreach ($cfg->configSearchList()) {
		print "       $_\n" if (defined $_);
	}
	print "\n";
	print "COMMAND LINE OPTIONS:\n";
	print "  -e      --cmdline        Run as command line client\n";
	print "  -N      --nagios         Run as nagios external check\n";
	print "\n";
	print "DAEMON OPTIONS:\n";
	print "  -p      --port           HTTP server listening port (Default: ", print_var($cfg->get('listen_port')), ")\n";
	print "  -H      --addr           Comma separated list of HTTP server bind addresses and unix socket paths\n";
	print "                           (Default: ", print_var($cfg->get('listen_addr')), ")\n";
	print "  -X      --protocol=PROTO Specifies daemon protocol (Default: ", print_var($cfg->get('protocol')), ")\n";
	print "  -P      --pid-file       Daemon pid file (Default: ", print_var($cfg->get('pid_file')), ")\n";
	print "\n";
	print "          --daemon         Start daemon, fork to background\n";
	print "          --daemon-fg      Start daemon, don't fork to background\n";
	print "\n";
	print "          --daemon-impl    Specifies daemon implementation (Default: ", print_var($cfg->get('daemon_impl')), ")\n";
	print "  -u      --user           Run as specified user. Requires root startup privileges. (Default: ", print_var($cfg->get('user')), ")\n";
	print "  -g      --group          Run under specified gid. Requires root startup privileges (Default: ", print_var($cfg->get('group')), ")\n";
	print "          --debug          Enables debugging\n";
	print "\n";
	print "  -A      --enabled-mods   Comma separated list of allowed ping modules\n";
	print "  -D      --disabled-mods  Comma separated list of disabled ping modules\n";
	print "\n";
	print "DOCUMENTATION:\n";
	print "  -i      --info=MODULE    Prints out module configuration options\n";
	print "\n";
	print "OTHER OPTIONS:\n";
	print "  -l      --list-modules   Prints out list of available ping modules.\n";
	print "          --doc[=MODULE]   Displays documentation.\n";
	print "          --readme         Displays readme\n";
	print "          --changelog      Displays changelog\n";
	print "          --credits        Display credits\n";
	print "  -V      --version        Print script version\n";
	print "  -h      --help           This help message\n";
	print <<EOF

ENVIRONMENT:

  AA_MONITOR_CONFIG: if set, aa_monitor will automatically try to load
                     configuration file specified by this env variable.
                     This is especially usable for CGI mode.

EXAMPLES:

 # command line: filesystem usage check, usage threshold == 50%
 $MYNAME -e FSUsage usage_threshold=50
 
 # command line: filesystem usage check, with different output formats
 $MYNAME -e FSUsage output_type=txt
 $MYNAME -e FSUsage output_type=json
 $MYNAME -e FSUsage output_type=html
 $MYNAME -e FSUsage output_type=eval
 
 # command line: filesystem usage check, parameters specified as
 # JSON string fed via stdin:
 echo '{ "usage_threshold": 50 }' | $MYNAME -e FSUsage - 
 
 # command line, DNS check with check parameters from file
 # with some parameters overriden from command line
 $MYNAME -e DNS /path/fsusage_config.json host=www.example.com timeout=1 
 
 # nagios/icinga compatible check
 $MYNAME -N FSUsage usage_threshold=50
 
 # nagios/icinga remote check
 $MYNAME -N ProxyCheck \
 	REAL_HOSTPORT=host.example.org:1552 \
 	REAL_MODULE=FSUsage \
 	USE_SSL=0 \
 	usage_threshold=50
 
 # start daemon
 $MYNAME --daemon
 
 # start daemon without forking to background with different listening port
 $MYNAME --daemon-fg --port 1554
 
 # start fastcgi daemon with custom configuration and don't go to background
 $MYNAME -c /some/file.conf --protocol fcgi --daemon-fg
EOF
}

#############################################################
#                          MAIN                             #
#############################################################

# try to load configuration
$cfg->load();

# do we have AA_MONITOR_CONFIG env variable?
if (exists($ENV{AA_MONITOR_CONFIG}) && length($ENV{AA_MONITOR_CONFIG})) {
	config_load($ENV{AA_MONITOR_CONFIG});
}

# there is no point of parsing command line
# if we were invoked as CGI script...
if (invoked_as_cgi()) {
	process_cgi();
	exit 0;
}

my $args_ok = 0;

# parse command line
Getopt::Long::Configure('bundling', 'gnu_compat');
my $r = GetOptions(
	'c|config=s' => sub { config_load($_[1]) },
	'default-config' => sub {
		print $cfg->toString();
		exit 0;
	},
	'e|cmdline' => sub { $args_ok = 1; $cmd_line = 1 },
	'N|nagios' => sub { $args_ok = 1; $cmd_line = 1; $nagios = 1 },
	'p|port=i' => sub { $cfg->set('listen_port', $_[1]) },
	'H|addr=s' => sub { $cfg->set('listen_addr', $_[1]) },
	'X|protocol=s' => sub { $cfg->set('protocol', $_[1]) },
	'P|pid-file=s' => sub { $cfg->set('pid_file', $_[1]) },
	'daemon' => sub { $args_ok = 1; $cfg->set('daemon', 1) },
	'daemon-fg' => sub {  $args_ok = 1; $cfg->set('daemon', 0) },
	'daemon-impl=s' => sub { $cfg->set('daemon_impl', $_[1]) },
	'u|user=s' => sub { $cfg->set('user', $_[1]) },
	'g|group=s' => sub { $cfg->set('group', $_[1]) },
	'debug!' => sub { $cfg->set('log_level', 'debug') },
	'A|allowed-mods=s' => sub { $cfg->set('modules_enabled', $_[1]) },
	'D|disabled-mods=s' => sub { $cfg->set('modules_disabled', $_[1]) },
	'i|info=s' => sub {
		module_info($_[1]);
		exit 0;
	},
	'l|list-modules' => sub {
		eval {
			my $class = CLASS_CHECK;
			eval "use $class; 1";
			print join(" ", CLASS_CHECK->getDrivers()), "\n";
		};
		if ($@) { die $@; } 
		exit 0;
	},
	'doc:s' => sub {
		perldoc($_[1]);
	},
	'readme' => sub {
		perldoc('P9::README_AA');
	},
	'changelog' => sub {
		perldoc('P9::AA::CHANGELOG');
	},
	'credits' => sub {
		perldoc('P9::AA::CREDITS');
	},
	'V|version' => sub {
		printf("%s %s\n", $MYNAME, $VERSION);
		exit 0;
	},
	'h|help' => sub {
		printhelp();
		exit 0;
	}
);

unless ($r) {
	print STDERR "Invalid command line options. Run $MYNAME --help for instructions.\n";
	exit 255;
}
unless ($args_ok) {
	print STDERR "Invalid command line: Do you want to run $MYNAME in daemon, command line or nagios/icinga mode?\n";
	print STDERR "Run $MYNAME --help for instructions.\n";
	exit 255;
}

# assign log level
$log->level($cfg->get('log_level'));

# command line client or daemon process?
$r = ($cmd_line) ? process_cmdl(@ARGV) : process_daemon();
exit(! $r);

# EOF
