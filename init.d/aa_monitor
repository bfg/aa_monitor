#!/bin/sh

# chkconfig stuff (Be RedHat/CentOS compatible)
# chkconfig: 2345 55 25
# description: aa_monitor service health checking daemon
#
# processname: sshd
# config: /etc/sysconfig/aa_monitor
# config: /etc/aa_monitor/aa_monitor.conf
# pidfile: /var/run/aa_monitor.pid

# LSB stuff
### BEGIN INIT INFO
# Provides:          aa_monitor
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

PATH="${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin"
export PATH

# check for defaults
for f in /etc/{sysconfig,default}/aa_monitor; do
	if [ -f "$f" -a -r "$f" ]; then
		. "$f" >/dev/null 2>&1
		break
	fi
done

PROGNAME=`which aa_monitor 2>/dev/null`
OPTS="--daemon"
if [ ! -z "${DAEMON_OPT}" ]; then
	OPTS="${DAEMON_OPT} --daemon"
fi
MYNAME=`basename $0`
ERR=""

daemon_start() {
	# daemon should be stopped
	daemon_status >/dev/null 2>&1 && return 1
	
	# check program
	if [ ! -f "${PROGNAME}" -o ! -x "${PROGNAME}" ]; then
		ERR="Bad aa_monitor binary: '${PROGNAME}'"
		return 1
	fi

	# try to start it
	${PROGNAME} ${OPTS} >/dev/null 2>&1
	rv="$?"
	if [ "$rv" != "0" ]; then
		ERR="Bad startup, check logs for details."
		return 1
	fi

	ERR=""
	return 0
}

daemon_stop() {
	# daemon must be running
	daemon_status >/dev/null 2>&1 || return 1
	_pid=`daemon_pid 2>/dev/null`
	
	if [ -z "${_pid}" ]; then
		ERR="No pids discovered."
		return 1
	fi
	
	# soft kill
	if ! kill ${_pid} >/dev/null 2>&1; then
		ERR="Error sending SIGTERM to process."
		return 1
	fi
	
	# kill succeeded, wait for termination
	i=0
	terminated=0
	while [ "$i" != "10" ]; do
		i=$(($i + 1))
		if kill -0 ${_pid} >/dev/null 2>&1; then
			terminated=1
			break
		fi
		sleep 1
	done
	
	# terminated?
	if [ "${terminated}" = "1" ]; then
		ERR=""
		return 0
	fi
	
	# send sigkill
	if ! kill -9 "${_pid}" >/dev/null 2>&1; then
		ERR="Error sending SIGKILL to process."
		return 1
	fi
	
	# check if motherfucker died...
	if kill -0 "${_pid}" >/dev/null 2>&1; then
		ERR="Process didn't stop even after SIGKILL."
		return 1
	fi
	
	ERR=""
	return 0
}

daemon_status() {
	ERR=""
	_pid=`daemon_pid 2>/dev/null`
	if [ -z "${_pid}" ]; then
		ERR="aa_monitor is stopped."
		_rv=1
	else
		ERR="aa_monitor is running as pid ${_pid}."
		_rv=0
	fi

	echo "$ERR"
	return ${_rv}
}

daemon_pid() {
	_pid=""
	# linux, openbsd, freebsd
	_pid=`ps xa 2>/dev/null | grep "${PROGNAME}" | grep -v grep | head -n 1 | awk '{print $1}'`
		
	# solaris and friends
	if [ -z "${_pid}" ]; then
		_pid=`ps -ef 2>/dev/null | grep "${PROGNAME}" | grep -v grep | head -n 1 | awk '{print $2}'`
	fi
	
	echo "${_pid}"
	if [ -z "${_pid}" ]; then
		return 1
	else
		return 0
	fi
}

case $1 in
	start)
		echo -n "Starting aa_monitor: "
		if daemon_start; then
			echo "ok"
		else
			echo "failed [$ERR]"
			exit 1
		fi
		;;

	stop)
		echo -n "Stopping aa_monitor: "
		if daemon_stop; then
			echo "ok"
		else
			echo "failed [$ERR]"
			exit 1
		fi
		;;

	status)
		daemon_status
		exit $?
		;;

	restart)
		$0 stop
		$0 start
		;;

	*)
		echo "Usage: $MYNAME {start|stop|restart|status}"
		exit 1
		;;
esac

exit 0;