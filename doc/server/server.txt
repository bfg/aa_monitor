# $Id:server.txt 530 2007-11-07 15:53:36Z bfg $
# $LastChangedRevision:530 $
# $LastChangedBy:bfg $
# $LastChangedDate:2007-11-07 16:53:36 +0100 (Wed, 07 Nov 2007) $

Adminalert monitor

Dokument opisuje shemo delovanja, namestitev in konfiguracijo Adminalert monitorja.
Adminalert monitor

O programskem paketu

Adminalert monitor je razširljiva programska oprema, s katero se da s pomočjo standardnega Adminalert paketa, ki je del TxtIndex5, preverjati takorekoč stanje česarkoli in glede na stanje, ki ga monitor vrne prožiti adminalerte.
Shema delovanja

Adminalert monitor je mišljen kot dodatek k standardnemu Adminalert paketu, ki je del TxtIndex5 in ne kot njegovo nadomestilo, saj nima vgrajenih funkcij alarmiranja osebja. Adminalert monitor (v nadaljevanju AM) je v bistvu preprost HTTP strežnik, ki odgovarja na validne HTTP/1.{0,1} zahteve, zatorej se da njegovo delovanje in s tem delovanje posameznega servisa, ter morebitno napako nedelovanja videti tudi s pomočjo spletnega brskalnika. Adminalert (v nadaljevanju AA) se na AM priklopi kot navaden HTTP klient in zahteva stran, ki vsebuje naslednje podatke:

    * AM modul (gonilnik)
    * konfiguracijske argumente gonilniku

+------------------------+                               +--------------------+
| AdminAlert (TxtIndex5) |<----HTTP request/response---->| Adminalert monitor |
+------------------------+                               +--------------------+
                                                                    |
                                                                    |
                                                                    v
                                                         +--------------------+
                                                         |      gonilnik      |
                                                         +--------------------+
                                                                    ^
                                                                    |
                                                                  seja
                                                                    |
                                                                    v
                                                         +--------------------+
                                                         |  abstraktni servis |
                                                         +--------------------+

AM pa te parametre validira, naloži gonilnik za modul, ki je bil za nek servis zahtevan in požene takoimenovano "ping" operacijo s parametri, ki jih je AA zahteval v HTTP zahtevi. Nazaj vrne spletno stran v tekstovni obliki, ki vsebuje uporabljene konfiguracijske, sporočilo o uspehu izvedbe ter trajanja ping operacije ter opcijsko še sporočila gonilnika, ki jih je le-ta sprožil med trajanjem ping operacije.
Namestitev
Repozitorij:

ftp://bork.noviforum.si/UNIX/Source-Packages/aa_monitor/

Na tej lokaciji je paket, ki je na voljo za takojšnjo namestitev. AM je sicer sestavljen iz dveh modulov (perllib in cluster), ki se ju lahko pobere iz CVS repozitorija cvs.noviforum.si.
Potrebna programska oprema:

    * Perl >= 5.6
    * Net::Server
    * Time::HiRes

Perl in omenjena modula sta potrebna za osnovno delovanje, vsak posamezen modul ima lahko še svoje dodatne zahteve. Če AM ne more naložiti modula, potem sporoči, katerih odvisnih modulov ni mogel naložiti, da bi lahko inicializiral ping modul.
Postopek namestitve:

# prenesemo distribucijski paket na nek stroj, npr v /tmp

# odpakiramo
# cd /export/software
# tar jxpf /tmp/aa_monitor-xxx.tar.bz2

# popravimo lastništvo
# chown -R root:root aa_monitor


Uporaba

Ko je AM nameščen, ga je treba zagnati z opcijami, ki ustrezajo našim zahtevam s privilegiji, ki še zagotavljajo delovanje gonilnikov, ki jih želimo uporabiti.

$ /export/software/cluster/bin/aa_monitor.pl

AM privzeto posluša na portu 1552. S spletnim brskalnikom se poskusimo priklopiti na URL naslov http://<hostname>:<port>/. Če se povezava ne more vzpostaviti (connection refused), potem se da iz dnevniških datotek sysloga razbrati, zakaj se AM ni mogel zagnati. AM piše vso svojo aktivnost v syslog. Syslog nastavitve so:

    * facility: local0
    * priority: info

Priporočena je uporaba syslog-ng syslog implementacije, kjer se da preprosto filtrirati AM sporočila. Primer syslog-ng konfiguracije za AM je:

# message source
source src {
        unix-stream("/dev/log");
        internal();
};

# filter section
filter f_aa_monitor {
	program("aa_monitor.pl");
};

# destination section
destination d_aa_monitor {
	file("/var/log/aa_monitor.log");
};

# logging section
log {
	source(src);
	filter(f_aa_monitor);
	destination(d_aa_monitor);
};


Če se je AM pravilno zagnal, potem v spletnem brskalniku dobimo približno tako vsebino:

#############################################################
# ERROR: No ping module specified. You must be kidding, man;)
#############################################################


You can ping using the following URL:
            http://195.250.198.145:1552/?module=<MODULE>&module_param1=v1&module_param2=v2...

Module specific parameters are listed on the following URL:
            http://195.250.198.145:1552/?module=<MODULE>

List of available ping modules:

DNS             (0.10) :: Checks if remote DNS server for availability.
EDAC            (0.10) :: Checks for ECC memory errors and PCI parity errors. Operates only on Linux OS.
FSUsage         (0.10) :: Checks mounted filesystem usage.
Jabber          (0.10) :: Checks remote Jabber server availability.
Kerberos        (0.10) :: Checks KerberosV authentication system operability.
LDAP            (0.10) :: Checks LDAP server availability.
MDRAID          (0.10) :: Checks Linux software RAID array consistency.
MegaRAID        (0.10) :: Checks MegaRAID RAID array consistency. Requires megarc.bin command to operate.
Rsync           (0.10) :: Checks remote RSYNC server availability.


Izpisalo se je sporočilo o napaki, ker HTTP zahteva ni vsebovala modula (gonilnika), s katerim želimo preveriti stanje nekega servisa. Recimo, da si želimo preveriti stanje Jabber strežnika. Zahtevamo URL: http://<server>:<port>/?module=Jabber

##############################
#        CONFIGURATION       #
##############################
host = 127.0.0.1
pass = 
port = 5222
resource = Jping
timeout = 5
tls = 0
user = 

##############################
#    PING PLUGIN MESSAGES    #
##############################


##############################
#        PING RESULT         #
##############################
PING MODULE: Jabber
SUCESS: NO
TIME: 39.535 ms

##############################
#        PING ERROR          #
##############################

No connection status. Authentication failed or Net::Jabber::Client bug.

AM je izvedel ping operacijo za modul Jabber s privzetimi nastavitvami, torej

    * host: 127.0.0.1
    * port: 5222
    * resource: Jping
    * timeout: 5

Kot je videti, preverjanje servisa ni uspelo, saj AM ni izpisal niza '<!-- SEARCH OK-->', ki je potreben, da AA spozna nek servis za odziven.
Spreminjanje konfiguracijskih parametrov ping modula/gonilnika

V večini primerov posameznih ping modulov privzete nastavitve vedno javijo neuspešno preverjanje servisa, zatorej je treba parametre preverjanja posameznega servisa spremeniti; to naredimo z dodatnimi parametri HTTP zahteve. Vsak modul, če zahtevamo ping brez parametrov, izpiše seznam vseh konfiguracijskih parametrov, ki jih uporablja. Posamezni konfiguracijski parameter nastavimo tako, da v HTTP zahtevi pripnemo v "request string" še dodatne parametre.

Primer: če bi želeli preverjanje Jabber strežnika, ki teče na stroju jabber.example.org, prijavili pa bi se z uporabniškim imenom jabber_user in geslom pass, potem bi URL izgledal takole:
http://<server>:<port>/?module=Jabber&host=jabber.example.org&user=jabber_user&pass=pass


POZOR:

+ Če želimo v kakšnem parametru uporabiti nealfanumerične znake, potem je treba vse nealfanumerične znake URL-kodirati.
+ AM predpostavlja, da so vsi nealfanumerični kodirani znaki v UTF-8 kodnem razporedu

Izbor izhodnega formata


AM od verzije 0.30 naprej podpira različne formate zapisov izhoda. Trenutno implementirani izhodni formati:

    * Tekstovni (plaintext)
    * HTML
    * XML

Privzeti format je tekstovni, vendar če AM zazna, da je http klient eden izmed novejših brskalnikov (Mozilla, Internet Explorer, Opera, Konqueror, ...), in če klient izrecno ni zahteval točno določenega izhodnega formata, potem izbere HTML izhod.

Če želimo izrecno izhod v nekem formatu, potem moramo podati url parameter output z argumentov želenega formata. Primer:

http://<server>:<port>/?module=ModuleName&output=html

http://<server>:<port>/?module=ModuleName&output=xml

http://<server>:<port>/?module=ModuleName&output=plain

Dodajanje novega tipa izhoda


Če želimo narediti nov tip izhoda, potem moramo razširiti razred Noviforum::Adminalert::Monitor::Daemon::Output v razred z imenom Noviforum::Adminalert::Monitor::Daemon::Ouput::<IME> in minimalno implementirati metode:

    * new() :: opcijsko
    * writeOuput(), ki mora ves izhod vpisati v filehandle $self->{_fd}


Razširjanje/dodajanje novih modulov


Dodajanje novih ping modulov je zelo preprosto. Potrebno je le izpeljati nov razred iz Noviforum::Adminalert::Monitor, v Noviforum::Adminalert::Monitor v razred z imenom Noviforum::Adminalert::Monitor, v Noviforum::Adminalert::Monitor::Ping::<IME> in minimalno implementirati naslednje metode:

    * new() :: konstruktor objekta, ter v njem specificirati propertyja _version in _description
    * clearParams() :: metoda ki postavi konfiguracijske parametre na privzete vrednosti
    * ping() :: metoda, ki dejansko preveri dostopnost servisa


Primer modula je v PREFIX/lib/Noviforum/Adminalert/Monitor/Ping/EXAMPLE.pm

Avtor: bfg@interseek.si
Zadnja sprememba: 28.06.2006 21:13